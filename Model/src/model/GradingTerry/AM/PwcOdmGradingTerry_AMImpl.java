package model.GradingTerry.AM;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import model.GradingTerry.AM.common.PwcOdmGradingTerry_AM;
import model.GradingTerry.VO.PwcOdmNGGradingHeadersVOImpl;
import model.GradingTerry.VO.PwcOdmNgGradingLinesVOImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 03 08:11:09 EDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PwcOdmGradingTerry_AMImpl extends ApplicationModuleImpl implements PwcOdmGradingTerry_AM {
    /**
     * This is the default constructor (do not remove).
     */
    public PwcOdmGradingTerry_AMImpl() {
    }

    /**
     * Container's getter for PwcOdmNGGradingHeadersVO1.
     * @return PwcOdmNGGradingHeadersVO1
     */
    public PwcOdmNGGradingHeadersVOImpl getPwcOdmNGGradingHeadersVO1() {
        return (PwcOdmNGGradingHeadersVOImpl)findViewObject("PwcOdmNGGradingHeadersVO1");
    }

    /**
     * Container's getter for PwcOdmNgGradingLinesVO1.
     * @return PwcOdmNgGradingLinesVO1
     */
    public PwcOdmNgGradingLinesVOImpl getPwcOdmNgGradingLinesVO1() {
        return (PwcOdmNgGradingLinesVOImpl)findViewObject("PwcOdmNgGradingLinesVO1");
    }

    /**
     * Container's getter for PwcOdmGradingTerryHeaderLinesVL1.
     * @return PwcOdmGradingTerryHeaderLinesVL1
     */
    public ViewLinkImpl getPwcOdmGradingTerryHeaderLinesVL1() {
        return (ViewLinkImpl)findViewLink("PwcOdmGradingTerryHeaderLinesVL1");
    }
    // Exceed Total Quantity Method Start

    public void Exceed_TOTALQTY() {

        Double StitchQuantity = 0.0;
        Double Total_D = 0.0;
        Double TotalQuantity_D = 0.00;

        getDBTransaction().commit();

        System.out.println("In Exceed_TOTALQTY method.... ");

        ViewObject hvo = this.getPwcOdmNGGradingHeadersVO1();
        // get Quantity in header
        try {

            StitchQuantity = Double.parseDouble(hvo.getCurrentRow().getAttribute("StitchQuantity").toString());
        }

        catch (Exception ee)
        {
            StitchQuantity = 0.0;
        }

        System.out.println("Stitching Qty  .... "+StitchQuantity);

        ViewObject lvo = this.getPwcOdmNgGradingLinesVO1();
        RowSetIterator lvoit = lvo.createRowSetIterator("lvoit");

        while (lvoit.hasNext()) {

            Row linesNext = lvoit.next();
            String LineId = null;
            //TotalQuantity_D = 0.00;
            // get id in grading line
            try {
                LineId = linesNext.getAttribute("StitchingLineId").toString();
            } catch (Exception e) { ;}
            
            System.out.println("line ID.... " + LineId);
            // get Quantity in grading line
            try {
                Total_D =Double.parseDouble(linesNext.getAttribute("TotalQuantity").toString());
                     System.out.println("Total at line is....Total_D1 " + Total_D);
                 }
             catch (Exception ee)
            {   Total_D = 0.0; }
            
            TotalQuantity_D = Total_D + TotalQuantity_D;
            
            System.out.println("Total at line is.... Total_D" + Total_D);
            System.out.println("Total at line is....TotalQuantity_D " + TotalQuantity_D);
             
             if (TotalQuantity_D > StitchQuantity) {
                  // Display Warning
               FacesContext context = FacesContext.getCurrentInstance();
                  FacesMessage message =  new FacesMessage(FacesMessage.SEVERITY_ERROR, "Stitching Quantity must be greater than Total Quantity...",  "");
                  context.addMessage(null, message);
               }
             else {  this.getDBTransaction().commit(); }
         }
        
        lvoit.closeRowSetIterator();
        System.out.println("Save.....");

        this.getDBTransaction().commit();

    }
}// End of AM
